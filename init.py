import phe
from phe import paillier
import json
from datetime import datetime
import blockchain

def keypair_dump_jwk(pub, priv, date=None):

    if date is None:
        date = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')

    rec_pub = {
        'kty': 'DAJ',
        'alg': 'PAI-GN1',
        'key_ops': ['encrypt'],
        'n': phe.util.int_to_base64(pub.n),
        'kid': 'Paillier public key generated by phe on {}'.format(date)
    }

    rec_priv = {
        'kty': 'DAJ',
        'key_ops': ['decrypt'],
        'p': phe.util.int_to_base64(priv.p),
        'q': phe.util.int_to_base64(priv.q),
        'kid': 'Paillier private key generated by phe on {}'.format(date)
    }

    priv_jwk = json.dumps(rec_priv)
    pub_jwk = json.dumps(rec_pub)

    return pub_jwk, priv_jwk

### ---------------------------------------------------------------------------

# Cria e grava em arquivos de texto as chaves p√∫blica e privada

public_key, private_key = paillier.generate_paillier_keypair()

public_key_jwk, private_key_jwk = keypair_dump_jwk(public_key, private_key)

with open("public_key", "w") as f:
    f.write(public_key_jwk + "\n")
    print("Written public key to {}".format(f.name))
    print("n={}".format(public_key.n))

with open("private_key", "w") as f:
    f.write(private_key_jwk + "\n")
    print("Written public key to {}".format(f.name))
    print("p={}".format(private_key.p))
    print("q={}".format(private_key.q))

### ---------------------------------------------------------------------------

blockchain_arq = "blockchain.json"    # arquivo onde vai ficar a blockchain dos votos

candidatos = ["Chapa A", "Chapa B", "Chapa C"]

# Cria a blockchain dos votos
blockchain = blockchain.Blockchain()
blockchain.adicionar_bloco(candidatos, 'candidatos')
blockchain.exportar_json(blockchain_arq)




